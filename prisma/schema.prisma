datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          ROLE            @default(basic)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
  comments              Comment[]
  saved_destinations_id String[]      @db.ObjectId
  liked_destinations_id String[]      @db.ObjectId
  saved_cultures_id     String[]      @db.ObjectId
  liked_cultures_id     String[]      @db.ObjectId
  liked_destinations    Destination[] @relation(fields: [liked_destinations_id], references: [id], name: "liked destinations")
  saved_destinations    Destination[] @relation(fields: [saved_destinations_id], references: [id], name: "saved destinations")
  liked_cultures        Culture[]     @relation(fields: [liked_cultures_id], references: [id], name: "liked cultures")
  saved_cultures        Culture[]     @relation(fields: [saved_cultures_id], references: [id], name: "saved cultures")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Destination {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  name           String
  description    String
  address        String?
  slug           String    @unique
  map_url        String?
  cover_slug     String?
  district_slug  String
  category_slug  String
  cover          Media?    @relation(fields: [cover_slug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  district       District  @relation(fields: [district_slug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  category       Category  @relation(fields: [category_slug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  comments       Comment[]
  users_saved_id String[]  @db.ObjectId
  users_liked_id String[]  @db.ObjectId
  users_saved    User[]    @relation(fields: [users_saved_id], references: [id], name: "saved destinations")
  users_liked    User[]    @relation(fields: [users_liked_id], references: [id], name: "liked destinations")

  @@map("destinations")
}

model Culture {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  name           String
  slug           String    @unique
  description    String
  body           String
  district_slug  String?
  cover_slug     String?
  district       District? @relation(fields: [district_slug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  cover          Media?    @relation(fields: [cover_slug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  comments       Comment[]
  users_saved_id String[]  @db.ObjectId
  users_liked_id String[]  @db.ObjectId
  users_saved    User[]    @relation(fields: [users_saved_id], references: [id], name: "saved cultures")
  users_liked    User[]    @relation(fields: [users_liked_id], references: [id], name: "liked cultures")

  @@map("cultures")
}

model District {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  name         String
  slug         String        @unique
  description  String?
  cover_slug   String?
  cover        Media?        @relation(fields: [cover_slug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  destinations Destination[]
  cultures     Culture[]

  @@map("districts")
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  name         String
  slug         String        @unique
  description  String?
  destinations Destination[]

  @@map("categories")
}

model Comment {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  slug             String       @unique
  body             String
  user_email       String
  user             User         @relation(fields: [user_email], references: [email], onDelete: Cascade, onUpdate: Cascade)
  destination      Destination? @relation(fields: [destination_slug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  destination_slug String?
  culture          Culture?     @relation(fields: [culture_slug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  culture_slug     String?

  @@map("comments")
}

model Media {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
  name               String
  public_id          String
  secure_url         String
  slug               String        @unique
  destinations_cover Destination[]
  cultures_cover     Culture[]
  districts_cover    District[]

  @@map("media")
}

enum ROLE {
  admin
  basic
}
